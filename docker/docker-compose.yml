version: '3.9'

services:

  queue:
    image: rabbitmq:3.10.7-management
    hostname: rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    environment:
      - RABBITMQ_DEFAULT_USER=rmuser
      - RABBITMQ_DEFAULT_PASS=rmpassword
    ports:
      - '15672:15672'
      - '5672:5672'

  db:
    build:
      context: .
      dockerfile: DockerfileDB
    image: postgres
    ports:
      - '5432:5432'
    environment:
      POSTGRES_PASSWORD: 'YuraMarketPassword___1984'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - data:/var/lib/postgresql/data


  app:
    build:
      context: ..
      dockerfile: ./docker/DockerfileBackend
    env_file:
      - .env
    ports:
      - '8000:8000'
    entrypoint: ['gunicorn', 'MyBank.wsgi:application', '--bind', '0.0.0.0:8000']
    user: backend


  migrate:
    build:
      context: ..
      dockerfile: ./docker/DockerfileBackend
    env_file:
        - .env
    entrypoint: ['python', 'MyBank/manage.py', 'migrate']
    depends_on:
        db:
          condition: service_healthy

  super_user_creator:
    build:
      context: ..
      dockerfile: ./docker/DockerfileBackend
    env_file:
      - .env
    entrypoint: ['python', 'MyBank/manage.py', 'createsuperuser', '--no-input']
    depends_on:
      migrate:
        condition: service_completed_successfully

  collect_static:
    build:
      context: ..
      dockerfile: ./docker/DockerfileBackend
    env_file:
      - .env
    entrypoint: ['python', 'MyBank/manage.py', 'collectstatic', '--no-input']
    depends_on:
      super_user_creator:
          condition: service_completed_successfully
    volumes:
      - static:/backend/MyBank/static

  update_database:
    build:
      context: ..
      dockerfile: ./docker/DockerfileBackend
    env_file:
      - .env
    entrypoint: ['python', 'MyBank/manage.py', 'update_database']
    depends_on:
      migrate:
        condition: service_completed_successfully

  worker:
    build:
      context: ..
      dockerfile: ./docker/DockerfileBackend
    env_file:
      - .env
    entrypoint: ['celery', '-A', 'MyBank', 'worker', '-l', 'INFO']
    depends_on:
      queue:
        condition: service_healthy
    user: backend

  schedule:
    build:
      context: ..
      dockerfile: ./docker/DockerfileBackend
    env_file:
        - .env
    entrypoint: ['celery', '-A', 'MyBank', 'beat', '-l', 'INFO']
    depends_on:
        queue:
          condition: service_healthy

  proxy-server:
      build:
        context: .
        dockerfile: DockerfileNginx
      ports:
        - '80:80'
      volumes:
        - static:/home/static/
      depends_on:
        app:
          condition: service_started


volumes:
  data:
  static: